#include "maze.h"
#include <time.h>

int main()
{
  clock_t begin = clock();
  int rows = -1, cols = -1, currX, currY, counter = 0;

	string mazeCurr[201];
  string maze[4] = {"|||||||||||",
		                "|   |||   |",
			              "|N|     |E|",
                    "|||||||||||"};

  string maze2[201] ={"+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+",
                      "N |     |                         |       |   |         |   |   |       |                 |       |     |   |       |   |     |       |     |           |   |   |   |   |   |         |     |       |   |",
                      "+ + +-+ + +-+-+-+-+-+-+-+-+-+-+-+ + +-+-+ +-+ +-+ +-+ + + + + + + +-+-+ + +-+-+-+-+-+-+-+ + +-+-+ + +-+ + + +-+-+ + + + +-+-+ + +-+-+ + + +-+ +-+-+-+-+ + + + + + + + + + + + +-+-+-+ + +-+ +-+-+-+ + + +",
                      "| | | |   |   |                   | |   |   |   | |   |   | | | | |   |   |   |         | |   | |   |   | | |     |   |     |   |   |   |   |         | | |   | | |   | | | | |   | |   | | |       | | |",
                      "+ + + +-+-+ +-+ +-+ +-+-+-+-+ +-+-+ + +-+ + +-+ + + +-+-+-+ + + + +-+ +-+-+ + + +-+-+-+ + +-+ + +-+ + +-+-+ + +-+-+-+-+-+-+ +-+-+ + +-+-+-+ +-+-+ +-+ + + +-+-+ + +-+-+ + + + + + + + +-+ + + +-+-+-+ + +",
                      "|   |   |       |     |     |       |     | |   | |     |   | |   |       | | | |   |       |   |   | |   |   |   |       |     | |       |       |   |   |   | | |     | | |   |   |   | | |         | |",
                      "+-+-+-+ +-+-+-+-+ +-+ + +-+ +-+-+-+-+-+-+-+ + +-+-+-+-+ + +-+ +-+-+ +-+-+ + + + + + +-+ +-+-+-+-+-+-+ +-+ + +-+ + + +-+-+-+-+-+ + +-+-+-+ +-+-+-+-+ +-+-+-+-+ + + + +-+-+ + +-+-+-+-+-+-+ + +-+-+ +-+-+ +",
                      "|   |   |   |     |   | |   | |   | |     | |           | |   |   |   |   | | | | | |   |       |         | |   | | |   |   |   |       | |   |         |     | | | |     | |     |         | |     |   |",
                      "+ +-+ +-+ +-+ + +-+ +-+-+ +-+ + + + + +-+-+ + +-+-+-+-+-+ + +-+-+ +-+ + +-+ + + + + + +-+ +-+-+-+ +-+ +-+-+ + +-+ + + + + + + +-+-+-+-+ + + + + +-+-+ +-+ +-+-+ + + + +-+-+ + +-+ + +-+-+-+-+ + +-+-+ +-+",
                      "|       |     | |   |     |   | |   |         |     |     | |   |   | | |   | | | | | |   |       | | |   | | |   | | | | |   |     | | |   | | |     |   |   | | |   |     | |     |       | | |     | |",
                      "+-+-+ + + +-+ + +-+ + +-+-+ +-+ +-+-+-+-+-+-+-+ +-+ + +-+-+ + + +-+ + + + +-+ + + + + + + + +-+-+-+ + + + + + +-+-+ + +-+ + +-+ +-+ + + +-+-+ +-+ +-+-+ +-+ + + + +-+-+ +-+-+ + +-+-+ +-+-+ + + + +-+ + +",
                      "|   | |   |   | |   | |       |   |     |   |   | |   |   |   |   | | |   |   |   | | | | |   |       | |   |     | | |   | |   | | |   |   |     |     |   | |   |   |     | |   |   |   | |   |   |   |",
                      "+ + +-+-+-+-+-+ + + + +-+-+-+ +-+ +-+-+ + + +-+-+ +-+-+ + +-+-+-+ + + +-+-+-+-+-+-+-+ + +-+-+ + +-+ +-+-+-+-+-+-+ + + + +-+ + + + + +-+ + + + +-+-+ +-+-+-+-+ +-+-+ + +-+-+ + +-+ + +-+ + + + +-+-+-+-+-+",
                      "| |   |   |     | | |   |   |     |   |   | |   |   | | | |   |   | | |       |       |       | | |       |       | | | | |   | |   |   | |   |     |       |   |   |   |   | |   |   | |   | |   |   | |",
                      "+ +-+ + + + +-+-+ +-+-+ + + + +-+-+ + +-+-+ + + +-+ + + +-+ + + +-+ + + +-+-+ +-+ +-+-+-+-+-+-+ + +-+-+-+ +-+-+ +-+ + + + +-+-+-+-+-+-+-+ +-+-+ +-+-+-+-+-+ +-+ + +-+-+-+ +-+-+ +-+-+ + +-+-+ + + + + + +",
                      "| | | | | | |           | | |       |   | |   | |   |       | | |   |   |   |   |   |   |     |   |     | |     | | | |       |           |   |   |   |   |   | |         |   |     | |       | | | | | |",
                      "+ + + +-+ + + +-+ +-+-+-+ +-+-+-+-+-+-+ + + +-+ + +-+-+-+ +-+ + + +-+-+-+ + +-+ +-+ +-+ +-+ + +-+-+ +-+-+ + +-+-+ + + +-+-+-+ + +-+-+-+-+-+-+ + + +-+ + + +-+ + +-+-+ +-+ + + +-+ +-+ +-+-+-+-+ + + + + +",
                      "|   |     | |   |   |   | |   |       | | | |   |     | | |     |       | |   |     |     | | |   |         |   |   |   |     |           |   | |       | |   |     |   |   | |   |     |   |   |   | | |",
                      "+ +-+ +-+-+ +-+-+-+ + + + + + + +-+-+ + + +-+ +-+ +-+ + + + +-+-+-+-+-+ +-+-+ +-+-+-+ +-+ +-+ + + +-+-+-+ +-+ + +-+ +-+ + + +-+-+-+-+ +-+ + +-+-+-+-+ +-+ +-+ +-+-+ +-+-+-+-+ + +-+ +-+-+ + + +-+-+-+ + +",
                      "|   |     | |   | |   |   | | |     | | |   | |   |   |   |         |   |     |   | | |       | | |   | | |   |   |   |   |         |   | | |   |   | | |     |   |   |     | |     |   | | | |   | |   |",
                      "+-+-+-+-+ + + + + +-+-+-+ + + +-+ + +-+ + + + + +-+ + +-+-+-+ +-+-+-+ +-+ +-+-+ + + + + + +-+-+ + + + + + +-+ +-+ + + +-+ +-+-+-+-+ +-+ + + + + +-+ + + +-+-+-+ + +-+ + + +-+ + + + +-+ + + + + + + + +-+",
                      "|           | | | |   |   | |   | |   | | |   | | | |   |   | |       |   |     |     | | |     | | |   |   | | | | | |   |   |     |   |   | |   | | | |       |     | |   | | | |     | |   | |   |   |",
                      "+ +-+-+-+ +-+-+ + + + + +-+-+ + + +-+ + + + +-+ + + +-+ + + + + +-+ +-+ +-+-+ +-+-+-+-+ + +-+-+-+ + +-+ +-+ + + + +-+ +-+-+ + + +-+-+ +-+-+-+ +-+ + + + + +-+-+ +-+-+-+ +-+ + + + +-+-+-+ +-+-+ +-+-+-+ +",
                      "|   |   |       |   |   |     | |   | | | |   | |   |   | |   | |   |   | |   |         |       | | |     |   | |   |       |         |   |   | |   | | | |   | |     |   |     |     |   |         |   |",
                      "+-+ + + +-+-+-+-+-+-+-+-+ +-+-+ +-+ + + + +-+ + +-+-+-+-+ +-+-+-+ + + +-+ + +-+-+-+-+-+-+-+-+-+ + + +-+-+ +-+-+ +-+ +-+-+-+-+-+ +-+-+-+ + + +-+ +-+ + + + + + + + + + +-+ +-+-+-+-+-+ + +-+ + +-+-+ + + +",
                      "|   | |   |           |   |     |   |   |   | | |       |   |     | | |   | |   |             |   |   |   |   |   |       |   | |   |   |   |       |   | | | |   | |   | |       | |   |   |   |     | |",
                      "+ +-+ +-+ + +-+-+-+-+ + +-+ +-+-+-+ +-+-+-+ +-+ +-+-+-+ + + + +-+-+ + +-+ + +-+ + +-+-+-+ +-+-+ +-+-+ + +-+ +-+-+ +-+-+ +-+ + + +-+ + +-+-+-+-+ +-+-+ +-+ + + +-+-+-+-+ + +-+-+-+ + +-+-+-+-+-+ +-+-+-+ +",
                      "|   | |   | |         | | | |       |     |   |     |   | | |   |   |   | |     |   |   |   |   |     |     |   |           | | |   | |               |   | |         | |         | |         |       | |",
                      "+ +-+ + +-+ + +-+ +-+-+ + + + +-+-+-+ +-+ +-+ +-+-+ + +-+ + +-+ + +-+-+ + + +-+-+ + + + +-+ + + + +-+-+ +-+-+ + +-+-+-+ +-+-+ + + + + + +-+-+-+ +-+-+-+-+-+ +-+-+-+-+ + +-+-+-+ +-+ + +-+-+-+ + +-+-+ + +",
                      "|     |   | | |   | |   |   | |       |   |       |       |     | |     | | |     | | | |     |   |   | |     | |     | |   |   | |   | |     |   |     |       |     |     |   |   |     | |   |     | |",
                      "+-+ +-+-+ + + + +-+ + +-+-+-+ + +-+-+-+ +-+-+ +-+ +-+ +-+-+-+-+-+ + +-+-+ +-+ +-+-+-+ + +-+ +-+-+ + + + + +-+ + + +-+ + + + +-+-+ +-+-+ + +-+ +-+ + +-+ + +-+-+ + +-+ + +-+ + +-+ + +-+-+ + +-+-+ +-+-+ +",
                      "| |     | | | |   |     |   | |     |   |   | |   |   |     |   | | |   |   |   |     |   |     | | |   |   | | |   |   | |       |   |   | | |   |   | |     | | |   | | |   |   |       |     | |   | |",
                      "+ +-+-+ + + + +-+ +-+ + + + + +-+-+ +-+ + + + +-+-+ +-+ +-+ + + + + + + +-+ +-+-+ +-+-+-+ +-+-+ +-+ +-+-+-+ +-+ +-+ +-+-+-+ +-+-+-+ + +-+-+ + + +-+-+-+ +-+-+ +-+ +-+-+ + +-+-+-+ +-+-+-+-+-+ +-+ + + +-+",
                      "| |     |   |   |     |   |   |     |   | | |   | | |   | | | |   | | |   | |     |   |   |       | |     |   |   | | |           | |     |   |         |   |   |     |   |   |   |       |         |   |",
                      "+ + +-+-+-+ +-+ +-+-+-+-+-+-+-+ +-+-+ +-+ + +-+ + + + +-+ + +-+-+-+ + +-+ + +-+ +-+ + + +-+ +-+ + +-+ +-+ +-+ +-+ + + + +-+-+-+-+ +-+-+-+ +-+-+-+-+-+-+-+ + +-+ + +-+ +-+-+ + + +-+-+-+-+ +-+-+-+ +-+-+ +",
                      "| |   |     |   |     |         |   |     |     |   |     | |     |   |   |   | |   |   |   |   |     |   |   |   | |   |     |   |       |   | |     |   | |   |   | |     | |       |           |     |",
                      "+ + +-+ +-+-+ +-+ +-+ + +-+-+-+-+ + +-+-+ +-+-+-+ +-+-+-+-+ + +-+ +-+-+ +-+-+ + +-+-+-+-+ +-+ +-+-+-+-+ +-+ +-+ +-+ +-+-+ +-+ + +-+ +-+-+-+ + + + +-+ + +-+ +-+-+-+-+ + +-+-+ +-+-+-+ + +-+-+-+-+ + +-+-+",
                      "| |   |   | |   |   | |   |   |   |   |   |   |   | |       | |       |   |           |   |   |     |   |   |   | |   | | | |   |   |   | | |   | | | |   | |       |       |     |   |     | |   | |   |",
                      "+ +-+ +-+ + +-+ +-+-+ + + + + + +-+-+ +-+-+-+ + +-+ + +-+-+-+ + + +-+-+-+ + + + +-+-+ +-+ +-+-+-+-+ +-+ + +-+ +-+ +-+ + + + + +-+ +-+ + + + +-+-+ + + +-+-+ + + +-+ +-+-+-+ +-+ +-+ +-+-+-+ + + +-+ + + +",
                      "|       |   |     |   | | | | |   | |     |   |   | |   |     | |     | |   | |   | |   |         |     |   |     | | | | |   |     | |   |       | |   |   | | |   |       | | |   |   |   |   |   | | |",
                      "+-+-+ +-+-+-+ +-+-+ +-+-+ + + +-+ + +-+ + + +-+-+ + +-+ +-+-+ + +-+-+ + +-+-+ +-+ + + + +-+-+-+ + +-+-+-+-+ +-+ +-+ + + + +-+-+-+ + + +-+-+-+-+-+-+ +-+ + +-+ + + +-+ +-+-+-+ + + +-+ + +-+-+ +-+-+-+-+ +",
                      "|     |       |   |     | | |     |     | | |     |   |     | |   |   | |   | | | |   | |   | | |   |     | | |     | |   |       | | |       |         | |   | |   |         |     | |   |   |   |   | |",
                      "+ +-+-+ +-+-+-+ + +-+-+ + +-+-+-+-+-+-+ + + + +-+-+-+ +-+-+ + +-+ +-+-+ + +-+ + + +-+-+ + + + + +-+-+ +-+ + + +-+-+ + +-+ + +-+-+-+ + + + +-+-+ +-+ +-+-+ +-+-+ +-+-+-+-+-+-+-+-+ + +-+-+ + + + + + + + +",
                      "|     |   |     |     | |   |           | |           |   | |   |   |   |     |   |     | |   | |     | | |   |     | | |   |       | | |         |     |   |     |   |   |       |   |   | |   | | | | |",
                      "+-+-+-+-+ + +-+-+-+-+ + +-+ + +-+-+-+-+-+ +-+-+ +-+-+ + + + +-+-+-+ + + +-+-+-+-+-+ +-+-+ + +-+ + +-+-+ + +-+-+ + + + + +-+-+-+-+ +-+ +-+-+-+-+-+-+-+-+ +-+ + +-+ + + + + + +-+-+-+ + + +-+-+-+-+ + + + +",
                      "|         | |       | |     |   |     | |       |   | | |   |   |   | | |   |       |     | |   | |     | |     | | |   |   |   |   |   |         | |   | | |   |   |   | |   |   | | |     |   | | |   |",
                      "+ +-+-+-+-+ + +-+-+ + + +-+-+-+-+ +-+ + +-+-+ +-+ + +-+ +-+-+ + + +-+ + + + + +-+-+-+ + +-+ + +-+-+ +-+ + +-+-+-+-+ +-+ +-+ + + +-+ +-+ + +-+ +-+ + + +-+ + +-+-+-+ +-+-+ +-+ + + +-+ + +-+ + + + +-+-+ +",
                      "|   |     | | |   | | | |         |   |     |   | | |   |     | |   | | | |   |       | |   |   |     | | |         |       | |         | |   |   | |     |       |   |   |   | | |   | | | | | | |   | |",
                      "+-+ + + + + + + + + + + + +-+-+-+-+ +-+ +-+ +-+ + + + +-+ +-+-+ + + + +-+ +-+-+-+-+-+-+ + +-+-+ + + + + + + +-+-+-+-+ +-+-+-+ +-+-+-+-+-+ +-+-+-+-+ +-+ +-+-+-+ +-+-+ +-+-+ +-+ + + +-+ + + + +-+ + + + +",
                      "|   | | | | |   | |   | |     |   |     |   | | | | |         |   | |   |     |   |     |   |   | | | |   |       |   |   | |   |   |     |         |   |         | |   | | |   |   |   |   | |   | |   |",
                      "+ +-+ +-+ + +-+-+ +-+-+ +-+ +-+ + +-+-+-+-+ + + + + + +-+-+-+ +-+-+-+-+ +-+-+ + + +-+ +-+-+-+ +-+-+ +-+ +-+-+-+-+ + +-+ + + +-+ + + + +-+-+ +-+-+ +-+ +-+ +-+-+ + + +-+ + + + +-+-+-+-+ +-+-+ + + + +-+ +",
                      "| |   |   | |           | |     |       |     | | | |   |     |           | | | |             |   | |     |   |   | |   |     | | | |     |     | |   |     |   | |   |   | |   |   |   |   |   | | |   |",
                      "+ + +-+ +-+ + +-+ +-+-+-+ +-+-+-+-+-+ + + +-+-+ + + +-+-+ +-+-+ +-+-+-+ + + + +-+-+-+ + + +-+-+ + +-+ +-+ +-+ +-+ + +-+ + +-+-+ +-+ +-+ + + +-+-+ + +-+-+-+ +-+ + + + + +-+ +-+ + + + +-+ + +-+-+ + + +-+",
                      "| | |   |   |   | |   |   |     |   | | |       | |     | |   |     | | |   |   |   | | |     | |   |   |         |   | |     |       | |   |     |     |   |   | | | |     | | | | | |   |   |   | |   |",
                      "+ + + +-+ +-+-+ + +-+ + + + +-+-+ +-+ +-+-+ +-+-+ +-+-+ + +-+ +-+-+ + + +-+-+-+ +-+ + +-+-+-+-+ +-+ +-+ +-+-+-+-+-+-+ +-+-+-+ +-+-+ + +-+-+-+ +-+-+-+-+ +-+-+ +-+-+ + +-+-+-+ + + + + + +-+-+ +-+-+ +-+ +",
                      "| | |   | |     | |     | |     |     |     |   | |     |     |     | |     | |   |   |   |   |   |   |             |   |     |     | |   |   |       |       |   | | |     | | | |   |   |   |   | | | |",
                      "+ + +-+ + + +-+-+ + +-+-+ +-+-+ +-+-+-+ +-+-+ + + + +-+-+ +-+-+-+-+ + +-+-+ + +-+ + + + + + + +-+ +-+ +-+-+ + +-+-+-+-+ + +-+-+-+-+-+ + + + +-+ +-+-+ + +-+-+-+-+ +-+ + +-+ + + + + +-+-+ + +-+ + + + + +",
                      "| | | |   |   |   | | |       |       | | |   | | |   |   |     |   | |   |   |   | | | | | | |   |   |     |   |         |     |   |   |   |   | |   |   |     |   | | |     |   | |   | | |   | | |   |",
                      "+ + + +-+-+-+ + +-+ + + + +-+ + +-+-+ + + + +-+ + +-+ + +-+-+-+ + +-+ + + +-+-+ +-+ + +-+ + + + +-+ +-+-+-+ +-+ + +-+-+-+-+ +-+ + + + +-+-+-+ +-+ + +-+-+ + +-+ + + + + + + +-+-+-+ + + + + + +-+ + +-+-+",
                      "|   | |     | |     |   |   | | |   | |   | |   |   |   |   |   | |   | |     |   | | |   | |   |     |   | |   |       |     |   | | | |   | |   |   |     |   | | | | | |         | |   | |   | |   | |",
                      "+-+-+ + +-+ + +-+-+-+-+-+-+-+ + + + + + +-+ + +-+-+ +-+-+-+ + + + + +-+ +-+-+-+-+ + + + +-+ +-+-+ +-+-+ + +-+ +-+-+-+-+ +-+ + +-+-+ + + + + + +-+ +-+ +-+ +-+ +-+ + + + + +-+-+-+-+-+ +-+-+ +-+ + +-+ + +",
                      "|   |   |     |       |   |   |   | | |     |       |       | |   | |       |     | | |   |   |   |     |     |       | |   | |   | | | | | | |   | |   | |     | |   | | |       |   |     |   |   |   |",
                      "+ + + +-+-+-+-+-+-+ + + + + +-+-+ +-+ + +-+-+-+-+-+-+ +-+-+-+ +-+-+ + +-+-+ + +-+-+ + + + +-+ + +-+ +-+-+-+-+-+ +-+-+ + + +-+-+ + + + + + + + + + + +-+ + + + +-+ +-+-+ + + +-+ + + +-+ +-+-+ +-+-+ + +-+",
                      "| |   |   |     |   |   | |     | |     |     |   |   |             | |   |   |   | | | |   | |   |             |   |   |     | | |   |   | |   |   |   | | |     |     |   |   | | |   |     | |   |   |",
                      "+ +-+-+-+ + +-+ + +-+-+-+ +-+-+ +-+ + +-+ +-+ +-+ + +-+-+-+-+ +-+-+-+ + + +-+ + + +-+ +-+-+ + +-+ + +-+-+-+-+-+ + +-+-+-+-+-+ + + +-+ +-+-+ +-+-+ +-+ +-+ + +-+-+-+-+-+-+-+-+ +-+-+ + +-+ +-+-+ + +-+-+ +",
                      "| |   |     |   | |       |   | |   | |     |     |     |       |     | | |   | |     |     |   | |       |   | |     |       | |   | |     |   |   |   | | |   |   |     |   |     |     |   | |     | |",
                      "+ + +-+ +-+-+ +-+ + +-+-+-+ + + + +-+ +-+-+ +-+-+-+-+-+ + +-+ + + +-+-+ + + +-+ + +-+-+ +-+-+-+ + +-+ + + + + + +-+-+ + +-+-+-+ +-+ + + +-+-+ + +-+ +-+ + +-+ + + + + +-+ +-+ + +-+-+ +-+-+ + + +-+-+ + +",
                      "|   |   |     |   | |     | | | | |       |   |     | | |   | | |   |   |   |   |     | |       |   | | | | |   |     |     |   |   | |       |   |   | | |   | | | |   |   | | |   |   |   | | |     | |",
                      "+-+ + + + +-+-+ +-+ +-+-+ +-+ + + + +-+-+-+-+ + +-+ + + +-+-+ + +-+ + +-+-+-+-+-+-+-+ + + +-+-+-+-+ +-+ + +-+-+-+ + +-+ +-+-+ +-+-+-+-+-+-+ +-+-+ +-+-+ + + +-+ + +-+-+ + + +-+ + + + +-+ +-+ + + +-+-+ +",
                      "|   | | |     | |   |     |   | | |   |     |   | |   | |   | |   | |   |         |     |       | | |   |       | |   |     |     |     |   |           |   |   |   |   | |   | | |   |   | |   |   |   |",
                      "+ +-+ +-+-+-+ + + +-+ +-+-+ +-+-+ +-+ + + +-+-+-+ +-+ + + + + +-+ +-+-+ + +-+-+-+ + + +-+-+-+-+ + + + +-+-+-+-+ + +-+-+-+-+ + +-+ +-+-+ +-+-+ +-+ +-+-+-+-+ + +-+-+ + +-+ + + + +-+-+-+ +-+ + + + + + +-+",
                      "| |     |     | |           |     |   | | |   | |   | | | |     |   | |   | |   |   | |   |   | | |   |     |   |     |   | | |       |       | |   |     | | |   |   | | | | |       |   | | |   |   | |",
                      "+ +-+ + + +-+-+ +-+-+ +-+ +-+-+-+ + +-+-+ + + + + + + + + +-+ + +-+ + +-+-+ + + +-+-+ +-+ + + + + +-+-+ + + + +-+-+-+ + +-+ +-+ + +-+ +-+-+-+-+ +-+ +-+-+ + + +-+ +-+-+ + +-+ +-+-+-+ +-+ + + +-+-+-+-+ +",
                      "|   | | |   | | |     |   |       | |   | | | |   | | |   |   |   |   |     | |     |       | | | |   | | | | |     |   |   |   | |   | |   |     |     | | |     |     | |     |     |   | | |     |   |",
                      "+-+ +-+ + + + + + +-+-+ +-+ + +-+-+ + + + + + +-+-+ + + +-+-+-+-+ +-+-+ +-+-+ +-+-+ + +-+-+-+ + + + + +-+ + +-+ +-+ + +-+ +-+ +-+ +-+-+ + + +-+ + +-+ +-+ + +-+-+-+ +-+ + + +-+ + +-+ + + + + +-+ + + + +",
                      "| |     | |   | |     |     | |     | | | | |   |   | |       | | |   |         |   | | |   | | |   |   | |       | |   |   |   |   |   | |   | | |   |   |   |   |   |   |   | | |   | | | |   | |   | |",
                      "+ +-+-+-+ +-+-+ + +-+-+-+-+-+-+ + +-+ + + + +-+ + +-+ +-+-+-+ + + + + + +-+-+-+-+ +-+ + + + +-+ +-+-+ + + +-+-+-+-+ + +-+-+ +-+ +-+ + + + +-+ + +-+ +-+ +-+-+ + +-+-+ +-+-+-+ + + +-+-+ + + +-+ + + +-+ +",
                      "|     |   |     |     |     |   |   | |   |   |   | |       |   |   | |     |   | |     | |         | | |     |   | |   | |   |   | | | | | |     |     |   | |     | |       | | |     | |   |   | |   |",
                      "+ +-+-+ +-+ +-+-+-+-+ + +-+-+ +-+ +-+ + +-+-+ +-+-+ +-+-+-+ +-+-+-+-+ +-+-+ + + + + +-+ + +-+-+-+-+ + + +-+-+-+ + + + + + +-+ +-+ + + + + + +-+ + +-+ +-+-+ + + +-+ + + + +-+-+ + + +-+-+-+-+ +-+-+ +-+-+",
                      "| |         |     | | | |     | | |   |     |             |         |     | | |   | |   |     |   | | | |   |   | | | |     | |   |   | | |     |     |   | | | | |   | | |     | |   |   |   |   |     |",
                      "+ + +-+ +-+-+ +-+ + + + + +-+-+ + + +-+-+-+-+-+-+-+ +-+-+ +-+-+-+-+ + +-+-+ + +-+-+ +-+-+-+-+-+ + + + + + +-+ +-+ + +-+-+ +-+ + +-+-+-+ + + +-+-+-+-+-+-+ + + + + +-+-+-+ + +-+-+ +-+ + + + +-+ + +-+ +-+",
                      "| |   | |     |   | | | | |       |     |       |   |   | |   |     |   |   |     |       | |   | | | |   |   |   |         | |   |   |   |     |       |   | | |     |   |   |   |     | | |   |   |   |",
                      "+ +-+ + + +-+-+ +-+ + + + + +-+-+-+ +-+ + +-+-+ + +-+ + + + + + +-+-+-+ + +-+-+-+-+-+-+-+ + + +-+ + +-+-+ + +-+-+-+-+-+-+-+ + +-+ +-+ +-+-+-+-+-+ +-+-+ + +-+ + + +-+-+ +-+ + + +-+-+-+-+ + + +-+-+-+-+ +",
                      "| |   |   |     |     | | | |     | | | | | |   |   | | | | | | |   |   |     | |     |   |   | |     |   |     |   |       |       |           | |     |     |   |   | |   |   |     |   | |   |       |",
                      "+ +-+ +-+-+ +-+-+ +-+-+ + + + +-+-+ + + + + + +-+-+ + + + + +-+ +-+ +-+ + +-+ + + + +-+ +-+-+ + +-+ + + +-+-+-+ + + + + +-+ + +-+ + +-+-+-+-+-+ + +-+-+-+-+-+ +-+-+ + + + +-+-+-+ +-+ + +-+ +-+ + +-+-+-+",
                      "| |   |     |     |       |     |   | |   |   | |   | | | |   |   |   |     |   | |   | |   | | |   | | |   |   | |   |   | | |   | |   |     | |   |       |     | |   |     |   |   |   |   | | |     |",
                      "+ + +-+ +-+-+ + +-+ +-+-+-+-+-+ + +-+ + +-+-+-+ + + + + +-+-+ +-+ +-+ +-+ +-+-+ + + + + +-+ + + + +-+-+ + + + +-+ + +-+-+-+ + + +-+ + + + +-+ + +-+ + +-+-+ +-+-+ + +-+-+-+-+ + +-+ +-+-+ +-+ + + + +-+ +",
                      "|   |   |     | |   |       |   | |   |       | | | | |     | | |   |   |     | | | |       |   |   |   | |   |   | |     | | | |   | |   | |     | |   |   |     |     |     |   |     |     |   |   | |",
                      "+-+-+ +-+ +-+-+-+ +-+-+-+-+ + +-+ + +-+-+-+-+ + + + + +-+-+ + + +-+ +-+ +-+-+-+ + + +-+-+-+-+ +-+-+-+ +-+ +-+-+-+-+ +-+ + +-+ + + +-+-+-+-+ +-+ + + +-+ + +-+ +-+-+-+-+ + +-+-+-+ + + +-+-+-+-+-+-+-+ + +",
                      "|   | |   |       |         | |   |       |   |   |       |   | |   |           | |           |       | |       |   |   | |   | |     |     | | | |     | |             |       | | | |   |     |   | | |",
                      "+ + + +-+-+ +-+-+-+ +-+-+-+-+ + +-+-+-+-+ + +-+-+-+-+ +-+ +-+-+ + +-+-+ +-+-+-+-+-+-+ +-+-+ +-+-+-+ +-+ +-+ +-+ + +-+ +-+ + +-+ +-+-+ + + +-+ + + + +-+-+ +-+ +-+-+-+-+-+-+-+-+ + + +-+ + + +-+ + + + + +",
                      "| | |   |   |     | |   |   |   |   |   |   |       |   | |       |   |   |         | |   |     |     |     |   | |   | |   | | |     | |   |   | |     | |   |   |         |   | | |   |   | | | | | | |",
                      "+ + +-+ + +-+ +-+ + + + + + +-+-+-+ +-+ +-+-+ + +-+-+ + + +-+-+ +-+ + + + + +-+-+-+ + + +-+-+-+ + +-+ +-+-+-+ +-+ +-+-+ +-+-+ + + +-+-+ +-+ + +-+ +-+-+ + + +-+ +-+ +-+-+-+ + +-+-+ + +-+-+-+ + + + + + +",
                      "| |     |   | |     | | | |       |   |     | |       | |         | |   | | |       | |   |     |   |     |   |   |           | | |     |   | | |     | |       |   |     |   |     |   |   |   | | | | |",
                      "+ +-+-+-+-+ + +-+-+-+-+ + +-+-+-+ +-+ +-+-+ + + +-+-+-+-+-+-+-+ + + +-+-+ + + +-+-+-+ + + + +-+-+-+-+-+ +-+ +-+ +-+ +-+-+ +-+-+ + + +-+-+ +-+ + +-+-+ + +-+-+-+-+ +-+-+ +-+-+-+ +-+-+-+ + +-+-+ + + + + +",
                      "| |       | |         | |     |   | |   | |   |       |     |   | | |     | |         | |   |   |   |   |   |       |   |     | |     | |   | |   |     |         |     |     | | |   | | |   | | |   | |",
                      "+ + +-+ +-+ + +-+-+-+ + +-+-+-+ +-+ +-+ + +-+-+-+-+-+-+ +-+ +-+ + + + +-+-+ +-+-+ +-+-+-+-+-+ + + + + +-+ + +-+ +-+-+-+ +-+-+ + +-+-+ + +-+ + + + +-+-+-+ +-+-+-+-+ +-+-+ +-+ + + + + + + + + +-+ + +-+-+",
                      "| |   | |   |   |   |     | |   |   |   |       |         | |   |   | | |   |   |   | |       | | | | |   | |   |       |     |   |   | | | |   | |     | |     |   |     | | | |   | | |   | |   |     |",
                      "+ +-+-+ + +-+-+-+ + +-+ + + + +-+ +-+ +-+-+-+-+ + +-+-+-+ +-+ +-+-+-+ + + +-+-+ +-+ + + + +-+-+ + + + + +-+ + +-+-+ + +-+ +-+-+-+ + +-+ + + + +-+-+ +-+-+ +-+-+ + +-+-+-+-+ + + +-+-+ + +-+-+ + +-+-+-+ +",
                      "| |   |   | |   | |   | | |           |   |     | |       |   |   |   |       |   | |   | |   | | |   | | | | |     | |   |       |     | |   |   |     | |     | |   |     | | |   | |   |   | |     | |",
                      "+ + + +-+-+ + + + +-+ + + + + +-+-+-+-+ + + +-+-+ +-+-+-+-+ +-+ + + +-+-+-+-+ +-+ + +-+-+ + + +-+ +-+-+ + + + + +-+-+ + +-+ + +-+-+-+-+-+ +-+-+ + +-+-+ + + +-+-+ + + + + +-+ + + + + + + + +-+ + +-+ + +",
                      "|   | |   | | | | | | | |   |   |     | | |     |   |   |       | | |   |   |   |   | |   | | |   |     | |   | |     | |   |     | |     | |   | |       |   |     |   | |   | | |   | | |   | | |   | |",
                      "+-+-+ +-+ + + + + + + + +-+-+-+ +-+-+ + + + +-+ +-+ +-+ + +-+-+-+ + + + + +-+-+ +-+-+ + +-+ + + +-+ +-+-+ +-+-+ +-+-+-+ + +-+-+-+ + + +-+-+ + +-+-+ +-+-+-+-+ + +-+-+-+-+ + +-+ + +-+-+ +-+-+ +-+ +-+-+ +",
                      "|     |   |   | | |   | |       |   |   | | | |       | |   |     | | | |         |   | |   |   |   |     |   |   |   |   | |       | |   |       |   |       | |       | |   | | |   |     |   |   |   |",
                      "+-+-+ + +-+ +-+ + +-+-+ +-+-+ +-+ + +-+-+ + + + +-+ + + +-+ +-+-+-+ + + +-+-+-+-+ + + + + +-+-+-+-+ + +-+-+-+ +-+ + + +-+-+ + +-+-+-+ +-+ +-+ +-+ +-+ + + +-+-+ + + +-+-+ +-+ + + +-+ + +-+ +-+ +-+ + +-+",
                      "|   |     |   | |   | |     |   | |       | | |   | |     |   | |   | |       |   | | | | |   | |   |   | |       | |     |     |   |   |   | | |   |   | |   |   | |   |     | |   | | |   |       |   |",
                      "+ + + +-+ +-+ + +-+ + + +-+ +-+-+ +-+-+-+ + + +-+-+ +-+-+ +-+ + + +-+ +-+-+-+ + +-+ + + + + + + + +-+-+ + + +-+-+-+-+-+-+ +-+-+ + + +-+ +-+ + + +-+ +-+-+ +-+ +-+-+ + + +-+-+-+ +-+ + + + +-+ +-+-+-+-+ +",
                      "| |   |   |   |       | |   |     |       | |   |   |       | | |     |           | |     | |   |     |   |       |   |   |     | |   |   | | |     | |   |   |   |   | |       |   | | |   |           |",
                      "+ +-+-+-+-+ +-+-+-+ +-+-+ +-+ +-+-+-+-+-+-+ + +-+ +-+ +-+-+-+ + +-+-+ + +-+-+-+-+-+ +-+ +-+ + + +-+-+ +-+ +-+-+-+ + + + +-+ +-+-+-+-+ +-+ + + +-+-+-+ + +-+ +-+ +-+ +-+ + + + +-+ +-+ + +-+-+-+-+-+ +-+-+",
                      "| |       |     |   |   |     |   |   |     |     |   |     | |       |   |           |   | | | |   |   |   | |   | |   |   |     |   |   | |   |   | |       |   |   |   | |   | |   |       |     |   |",
                      "+ + +-+-+ +-+-+-+ +-+ + + +-+-+ + + + + +-+-+-+-+-+ +-+ +-+ + +-+-+-+-+-+ + + +-+-+-+-+-+ + +-+ +-+ + + +-+ + + +-+ +-+-+ +-+ +-+ + +-+ +-+ +-+ +-+ + +-+-+-+ + + +-+ +-+-+-+-+ + + +-+-+-+-+ + +-+-+ + +",
                      "| |     |   |   |     |   |   | | | |   |     |   | |     |   |   |   |     |     |       |   |   |   | |   |   | |       |   |   |       |   | |   |         | |   |   | |   | |   | |   |   |   |   | |",
                      "+ +-+-+-+-+ + + + +-+-+-+-+-+ + + + +-+-+-+-+ + + + + +-+-+-+-+-+ + + + +-+-+-+-+-+ +-+-+-+-+ +-+ +-+-+ + + + + + + +-+-+-+ +-+ +-+-+-+ + +-+ + + +-+-+-+-+ +-+ + +-+-+ + + + + + +-+ + + + +-+-+ +-+ + +",
                      "|   |       | |           |     | |           | | |   |   |         | |   |   | |   |   |     |   |   |   |   | |   |   | |   |   |     |     |   |   |   | |   | |     | | | | | | |   | | |   |   | | |",
                      "+-+ + +-+-+-+ +-+ +-+ +-+ + +-+-+ + +-+-+-+-+-+-+ +-+-+ + +-+-+-+-+-+ +-+ +-+ + + +-+ + + +-+-+ +-+ + + +-+-+-+-+-+-+ + + +-+ +-+ + +-+-+-+-+-+ +-+-+ + + + + +-+ + +-+-+ + + + + + + +-+ + + + + + + + +",
                      "|   |   |     |     |   |   | |   |   |     |   |     | |             | | |   | |   | | |   | |     |   |   | |   |   | | | |   |               |       | |   |   | |       | |   | |   | | | |   | | | |",
                      "+ +-+-+ + +-+-+-+-+ + +-+-+-+ + +-+-+ + +-+ + + +-+-+ + + +-+-+-+-+-+-+ + + +-+ +-+ + + + + + +-+-+-+-+ +-+ + + + +-+-+ + + +-+ +-+-+-+-+-+ +-+-+ +-+-+-+ +-+-+ +-+ + + +-+-+ +-+-+ +-+ + + + +-+-+-+ + +",
                      "|   | | | |     | | |   |   | | |   | |   | | | |   | | |       |   | | |     | |     |   |         | |     | | |       |   | |     |   |   |     | |     |   |     | |   | | |   |   | | | |       | | |",
                      "+-+ + + + +-+ + + + +-+ + +-+ + + + + +-+ + + + + + + + +-+-+ + + + + + +-+ + + +-+-+-+-+-+ +-+-+-+ + +-+-+-+ + +-+-+-+-+-+ + +-+-+ + + + + +-+ +-+ + +-+-+ + +-+-+-+-+-+ + + + +-+ +-+ +-+ +-+ + + + + +",
                      "|   | | |   | | | | |   | |   | | | |     |   |   |     |   | | | | | |     | |   |   |   | |       |       | |     |     | |       | |   | |   | |   |   | |   |     |   |   |             |   | |   | |",
                      "+ +-+ + +-+ + + + + + +-+ + +-+ + + +-+ +-+-+-+-+-+-+-+-+ + +-+ + + + +-+-+-+ + + + + + +-+ + +-+-+-+-+ +-+ + +-+-+ + +-+ + +-+ +-+-+ +-+-+ + +-+ +-+-+ + + +-+ +-+ + + +-+-+-+-+-+ +-+ +-+-+-+-+ +-+-+-+",
                      "| |       |   | | | | |   | |     |     |           |     |   | | | |       | | | | | |     |   |     | |   | | |       | | | | |     |   |   | |       |   | |   | | | |       |   |   |         |     |",
                      "+ + +-+ + +-+-+ + + + +-+ + +-+-+-+-+-+-+ +-+-+-+-+ + +-+-+-+ + + + +-+-+-+ + + + + + +-+-+-+-+ +-+-+ + + +-+ + + +-+-+-+ + + + +-+-+-+ + +-+-+ + + +-+-+-+-+ +-+ +-+ + + +-+-+ + +-+ +-+ +-+-+-+-+ +-+ +",
                      "| |   | | |   | | | |     | |     |   |           |   |         | | |   |   |   |   | |   |             |   | | | |   |   |   |     |   |     |   |   |     |   |   | | |     |   | |   |   |       |   |",
                      "+ +-+-+ + +-+ + + + +-+-+ + + +-+ + + +-+-+-+-+-+-+-+-+ +-+-+ +-+-+ + + + +-+-+-+-+-+-+ + +-+-+ +-+-+-+-+ +-+ + + +-+ + +-+ +-+-+-+ +-+-+-+-+ +-+-+-+ +-+-+ + + +-+ + + +-+-+ +-+-+ +-+ +-+ + +-+-+-+ +-+",
                      "| |     | |   | | | |     | | |   | |         |   | |   |   |       | |   |   |         |   |   |   |   | |   | |   | |   | | |     |     |   |   | |     |   |     |     | |       | | |   |     |     |",
                      "+ + +-+-+ + + + + + + + +-+ + +-+-+ +-+-+-+-+ + + + + +-+ + +-+-+-+ + +-+ + +-+ +-+-+-+-+-+ + +-+ + + + + + +-+ +-+ + +-+-+ + + + +-+ +-+ + +-+ + + +-+-+ +-+ +-+ +-+-+-+ + +-+-+-+-+ + +-+ +-+-+ +-+-+-+",
                      "| | |   |   | | |   | | |   |   |   | |       | | | | |   |   |     |   | |   | |           |   | |   |   |   | |   | |   |   | |   |   | |     | |       | |   |         |   |   |   |   |     |   |   |",
                      "+ + + + +-+-+ + +-+-+-+ + +-+ + + +-+ + +-+-+-+ + + + + +-+-+ + +-+-+-+ +-+-+ + + +-+-+-+-+-+-+-+ + +-+-+-+-+ + + +-+ + + + + + +-+ +-+-+ + + +-+ + +-+-+-+ +-+-+-+-+-+ + +-+ + +-+ +-+-+ +-+ + +-+ + + +",
                      "|   | | |   | |     |   |     |     | | |       | |   | |     |         |       | |       |       |   |   |     |   | | |   | | | | |     | | | | |     | |           | |   | |     |   |   | |     | | |",
                      "+-+-+-+ + +-+ + +-+-+ +-+-+-+-+-+ + + + + +-+-+-+ +-+-+ + +-+-+-+-+-+-+ + +-+ +-+-+ +-+-+ + +-+-+-+-+ + +-+ + +-+-+ + + +-+-+ + + + + +-+-+-+ + + +-+ + + + +-+-+-+-+ + +-+ + + +-+ + + +-+ + +-+-+-+ + +",
                      "|       |       |     |           | |   |       |   |   |       |     | |   |       |   |   |       |   |   | |   | | | |     | |   | |     | |   |   | |   |   | |   | |   |   |   | |   |   |   |   | |",
                      "+ +-+-+-+ +-+-+-+ +-+-+ +-+-+-+-+-+ +-+-+-+-+-+ +-+ + + +-+-+-+ +-+-+ +-+-+-+-+-+-+-+ + +-+-+-+-+-+ +-+-+ +-+ + + + + + + +-+-+ + +-+ + +-+ + +-+-+-+-+ + +-+ + + + +-+ +-+-+-+-+ +-+ + + + +-+ +-+ +-+ +",
                      "| |     | |     |   |   | |     | | |     |   | | | | | |   |   |   |       |   |   | | |     |     |   | |   | |   |   |     | | |   |   |   |       | |   | | | |   |               | |   |         | |",
                      "+ + + +-+ + +-+ +-+ + +-+ + +-+ + + + +-+-+ + + + + + +-+ + + +-+ + +-+-+-+ + +-+ + + + + +-+ +-+ +-+ + + + +-+ +-+-+ + +-+-+ + +-+ +-+-+ + +-+-+-+-+ + +-+ + + + +-+ +-+-+-+-+-+-+-+-+ +-+-+-+ +-+-+ + +",
                      "| | |       |     |   |       |   | | | |   | |   |       | |     |   |   |       | | |   | |   |     |   |     |   | |   |   |   |       | |   |   | | |   | |     |             |     |   |   |   | | |",
                      "+ + +-+-+ +-+-+-+ +-+-+-+ +-+-+ + + + + + +-+ +-+-+-+-+-+ + +-+-+-+-+ + +-+ + +-+-+ + +-+-+ +-+ +-+-+ +-+-+ +-+-+ + +-+-+ +-+-+-+ + + +-+-+-+ + + + + + + +-+-+-+-+ +-+-+-+-+-+-+ + +-+-+ + + +-+ + +-+ +",
                      "| |   |   | |   |   |     |     | |   | |   | |       |   |   |       |     | |     | |     |   |     |   | |     |     |     | |   |   |     |   | | | |     |   | |     |     | |       |   | | |     |",
                      "+ +-+ + +-+ + + +-+ + +-+-+-+-+-+-+ +-+ +-+ + + + +-+ +-+ +-+ +-+-+-+-+-+-+-+ +-+ +-+ + +-+-+ +-+-+-+-+ + + + +-+-+-+-+ + +-+ + + +-+-+ + +-+-+-+ + + + +-+-+ + + + + + +-+ +-+-+ +-+-+-+-+ +-+ + +-+-+-+",
                      "| |   | |   | | |   | | |     |         |   | | | |   |   | |   |     |     | |   | | |       |       | | | | |       |   | |   |     | |   |   | |   | |     | | |   |   |             |   | |         |",
                      "+ + +-+ + + + + + +-+ + + +-+ + +-+-+-+-+ +-+ + + +-+-+ +-+ +-+ + +-+ + +-+ + + +-+ + +-+-+-+-+ +-+-+ + +-+ + + +-+-+ +-+-+ + +-+-+-+ + + + + + + +-+-+ + +-+-+-+ +-+-+-+ +-+-+-+ +-+-+ + +-+ +-+ +-+-+ +",
                      "| |   |   | | | | |   | | | |   |   |     | | | |   |   |     |   |   |   | | |     |     |     |   | |   | | |     |   |   |       | |   |   | | |   | |       |     | |     | |     | |   |     |   | |",
                      "+ +-+ +-+-+ +-+ + + +-+ + + + +-+-+ + +-+-+ + + + + + +-+ +-+-+-+-+-+ +-+-+ + +-+-+-+-+-+ + +-+ + + + +-+ + + +-+ + +-+-+ + + +-+-+-+ +-+-+-+-+ +-+ + + +-+-+-+ +-+-+ + +-+-+ + +-+-+ + +-+ + +-+-+ +-+ +",
                      "|   |   |   |   | |   |     | |     |       |   | | |   |             |   | |     |     |     | | |     |       | | |   | |   |       |       |   | | |   | |   |       |   | |     | |     | |   |     |",
                      "+ + +-+ +-+ + +-+ + + +-+ +-+-+ +-+-+-+-+-+-+-+-+-+ +-+ +-+-+-+-+-+-+ + + + +-+-+ + +-+ +-+ + +-+ +-+-+-+-+ +-+-+ + + + + +-+-+ +-+-+-+-+-+-+ +-+ + + +-+ + + +-+-+-+ +-+ + + + +-+ +-+ +-+-+ + + +-+-+ +",
                      "| |   | |   | |   | | |   |   |   |         |       |   |   |   |     | |   |       |   |   | |   |   |   | | |   |   |   |     |     |         |   |     | | |     | |   | |   | |   | |     | | | |   |",
                      "+ +-+ + + +-+ + +-+ +-+ +-+-+ +-+ +-+-+-+-+ + +-+-+-+-+ +-+ +-+ + +-+-+ +-+-+-+-+ +-+ +-+ +-+-+ +-+ + + + + + + +-+-+-+-+-+ +-+-+ +-+ + +-+-+-+ +-+-+-+-+-+ + + +-+ + + +-+-+-+-+ +-+ + + +-+-+-+ + + +-+",
                      "| |   | |   | |   |     |   |   |   |         |         |   |   | |           |   | |   | |   | |   | | |   | | |       | | |   | |   | |     |         |     |   |   | |   |       | | |     |   |   | |",
                      "+ + +-+-+-+ + +-+ +-+-+-+ + +-+ +-+ +-+-+ + + + + +-+-+-+ +-+ +-+ + +-+ + +-+ + +-+ +-+ + + + + +-+-+ + +-+-+ + + +-+-+ + + +-+ + + +-+ + +-+-+-+ +-+-+ + +-+-+ + +-+-+ + + + +-+ + + + +-+-+ + +-+-+-+ +",
                      "| |   |     |   | |       |   |   |     | | | | |   |       |   | | |   |   |   | |     |   | | |     |   | |   |   |     |   | | |   |   |           | | |   | |         | | | | |   |     | |       | |",
                      "+ +-+ + +-+-+-+ + + +-+-+-+ + + + +-+-+ +-+ + + +-+ +-+ +-+ + + + + + +-+-+ +-+-+ +-+-+-+-+-+ + + +-+-+-+ + +-+-+-+ +-+-+ +-+ + +-+-+ +-+-+ +-+-+ +-+ + + + + + +-+ +-+-+-+ + + + +-+-+-+-+-+ + +-+-+ + +",
                      "|   | | |       |   |     | | | |   |   |   | |   |   |   |   | |   |   |   |   | |       |   |   |   | | | |   |   |   | |           |     |     |   | |   | |   |   | |   | |   |   |       | |   |   |",
                      "+ + +-+ + +-+-+-+ +-+-+ + + + + +-+ + +-+ +-+-+-+ +-+ +-+ +-+-+ +-+-+-+ + +-+ + + + +-+-+ + +-+-+-+-+ + + + +-+ + +-+ + + + + + +-+-+-+ +-+-+ +-+-+-+-+ +-+-+ +-+ +-+ + + +-+ +-+-+-+ + +-+-+-+ +-+ +-+-+",
                      "| |     |   |   | |   | |   |   |   |     |     | | | |     | | |       |   | | |       |             | | |   | | |   |   | | |     |   |   | |     |       |     |   | | |   |   |   | |   |   |   |   |",
                      "+ +-+-+-+-+ +-+ + + + + +-+-+-+-+-+-+-+ +-+ +-+ + + + + + + + + + +-+-+-+ +-+ + +-+-+ + +-+ +-+-+-+-+-+ + +-+ + + +-+ +-+-+ + +-+-+ + +-+ + + +-+-+ +-+-+-+ +-+-+-+ +-+ + + +-+ + + +-+ +-+ + +-+ + + + +",
                      "|         | |   | | |       |   |       |   | | | | |   | |   | |   |     |   |   |   |   |       |           | |   |       |     |   |   | |   |   |   | |   |       | |       | | |       |     | | | |",
                      "+-+-+ + + + + +-+ + +-+ + + + +-+ +-+-+-+ +-+ + + + +-+-+-+-+-+ +-+ + +-+-+ +-+-+ +-+-+ + +-+-+-+ +-+-+-+ +-+-+ +-+ +-+-+-+-+-+-+ +-+-+ +-+ +-+ + +-+ + + +-+ + +-+-+ + +-+-+-+-+-+ + +-+-+ + +-+-+ + + +",
                      "|   | | |   |     | |   | |   |   |         | |   |   |   | |   |   |     | |   |     | | | |     |               | |     |       |   |   |   | |   | |   |   |     | |       |     | |     | |   |   | |",
                      "+ + + + +-+-+-+-+-+ +-+-+ +-+-+ + + +-+-+-+-+ +-+-+-+ + + + + +-+ +-+-+ + + + + +-+-+ +-+ + + +-+-+ +-+-+ +-+-+ + + + +-+ + +-+ +-+-+ +-+ +-+-+ +-+ + +-+-+ +-+-+-+ + +-+-+-+ +-+ +-+ + +-+-+ + + +-+-+ +",
                      "| | | |   |   |   |     |       | |   |       |   |   | |     |   |     |   | |     |     | |   |   |     |     | |   |   | |         |       |     |     | |     | |   |   | |   |   | |     | | |   | |",
                      "+ + +-+-+ +-+ + +-+-+-+ +-+-+-+-+-+-+ + +-+-+-+ + +-+ + +-+ +-+ +-+-+-+-+-+-+ +-+-+ +-+-+-+ +-+ + +-+ +-+-+ +-+-+ +-+-+ +-+ + +-+-+-+-+-+-+-+ +-+ +-+-+ +-+ + + +-+ +-+ + + + + +-+-+ + + +-+-+-+ + +-+ +",
                      "| | |   |   |   |     | |   |       |   |   |   |   |     |   | |   |   |     |     |     |   | | | |     | |           | | |   |     |       |   |   | |   | |     |   | | | | |     | |       | | |   |",
                      "+ +-+ + +-+ + +-+ +-+ + + + + +-+-+ + +-+ + + +-+-+ +-+ + +-+ + +-+ + + + +-+-+ +-+-+-+-+ +-+ + + + + +-+ + + +-+-+-+-+-+ + +-+ + +-+-+ +-+ +-+-+ + + + + +-+ +-+-+-+-+-+ + + + +-+-+-+ +-+-+-+ + + + +-+",
                      "|   | |     |   | |   | | |   |   |   |   | | |     |   |   | |     | |     |   |     |   |   |   |   |   | |   |   |   |   |   |   |   | |       | |   | |   |       |   |   |                 | |   | |",
                      "+ + + +-+-+-+-+ + + + + + + +-+-+ +-+-+ +-+ + + +-+-+ +-+ + +-+-+-+-+ +-+ + + +-+ +-+ + +-+ +-+-+-+-+-+ +-+ + + +-+ + + + +-+ +-+-+ + +-+ +-+-+-+-+ +-+-+ + +-+ + +-+ + +-+ +-+-+-+-+-+ +-+-+-+-+ +-+-+ +",
                      "| | | |       |   | |   | |       |       | | |   |   |   |         | |   | |       |   |   |         | |   | |     | |   |   |   |     |     |           |     |   |   | |   |   |     |       |     | |",
                      "+-+ + +-+ +-+-+-+-+ +-+-+ +-+-+ + +-+-+-+ + +-+-+ + +-+-+-+-+-+-+-+ + + +-+-+-+-+-+-+-+-+ +-+ +-+ +-+ + +-+-+-+-+-+-+ +-+-+-+-+ +-+-+-+-+-+-+ + +-+-+-+-+-+-+-+-+-+ +-+-+ +-+ + +-+ +-+-+ +-+ + +-+-+ + +",
                      "|   |   | |       |       |     | |       |     | | |   |   |       | |   |   |   |       | |   | |   |   |         |         |   |     | |   | |   |   |     |     |   |   | |   | |     |   | |     | |",
                      "+ + +-+ + + +-+-+ + +-+-+-+ +-+-+ + +-+-+-+-+-+ + + +-+ + + +-+-+ +-+ +-+ + + + + + +-+-+-+ +-+ + + +-+-+ +-+ + +-+-+-+-+-+ + +-+ +-+-+ + + + + +-+ + + + +-+ + +-+-+-+ +-+ + +-+ + + +-+-+ +-+ + + + + +",
                      "| |     | | | |   | |     |   | |   |           | |     | |     |   | |   | | | | | |       |   | |     |   | | |       |   |   |   |   | | | |   | | |   |   |   |   | |     |     | |     |   | | | | |",
                      "+-+-+-+ + + + + +-+ +-+ +-+-+ + +-+-+ +-+-+-+-+ + +-+-+ + +-+-+ +-+ + + +-+ + +-+ + +-+ +-+-+ + +-+-+-+-+-+ + + + +-+-+-+ +-+-+ +-+ + +-+ + +-+-+ + + +-+-+-+-+-+ + + + +-+-+-+ +-+-+ + +-+-+ +-+ + +-+ +",
                      "|     | |     |         |   |   |     |       |   | |   | |   |   |   |     | |   |   |       |         |   | |   |   |   |   |     |     | |   | | |       |     | |     |     |     | |   | |   |   | |",
                      "+ +-+ +-+-+-+-+-+-+ +-+-+ + +-+-+ +-+-+-+-+-+ +-+-+ + +-+ + +-+-+ +-+-+-+-+-+ + +-+-+ +-+-+-+-+-+-+-+ + + +-+ +-+-+ +-+ +-+-+ + +-+-+-+ + + + + + + +-+-+-+ +-+-+-+ +-+ + + +-+-+ +-+-+ + + +-+ +-+-+ + +",
                      "| | |   |     |   | |     | |   |   |       |         |   |     |       |   | | |     |   |     |     |   |   |         |     |       | |   | | | | |     |   |   | | | |   | |     | |   | |   | |   | |",
                      "+ + +-+ +-+ + + + + + +-+ + + +-+-+ + +-+ +-+-+-+-+-+-+ +-+-+-+ +-+-+ + + + + + + +-+-+ + +-+ + + +-+-+-+-+ +-+-+-+ +-+-+ +-+-+-+-+-+ + +-+-+ + + + +-+-+ +-+ +-+ + + + +-+-+ + + + + +-+-+ + +-+ + +-+ +",
                      "|   |     | |   |   |   | |   |     | | |         |     |     |       | | |     |   |   |   | | | | |     |       | |   |     |       |   |   | |   |   |   |   |   | |   |   | | | |       |   |   |   |",
                      "+-+-+-+ + + + +-+-+-+-+ +-+ + + + +-+ + +-+-+ +-+-+ +-+-+ + +-+-+-+-+ +-+ +-+ +-+-+ +-+-+-+ + + + + + +-+ + +-+-+ + + + +-+-+ + +-+-+-+-+ +-+-+ +-+-+ + + +-+-+ + +-+ +-+ + +-+ +-+ +-+-+-+-+-+ +-+-+ + +",
                      "|     | |   |   |   |     | | | | |   |   | |     | |   | |   |     |     |   |   | |     | | | | | |   |       | | | |   |   |         | |   |   |   |         |   | |   |     |   |           |     | |",
                      "+-+ + +-+-+-+-+ + + +-+-+ +-+ + +-+ +-+-+ + +-+-+ + +-+ + +-+ + +-+-+-+-+-+ +-+ + + + +-+ + + +-+ + +-+ +-+-+-+ + + + +-+ + +-+-+-+-+-+ + + + +-+ + +-+-+-+-+-+-+-+ + + +-+-+-+-+ +-+ +-+-+-+-+-+ +-+-+-+",
                      "|   |           | |     |   | |   |   | |   |     |   | | |   |       |         | | |   | | |     |   |     |   | |   |   | |           |   | |   | |       |     | | | |     |     |   |   |   | |     |",
                      "+ + +-+-+-+-+-+-+ +-+-+ +-+ +-+-+ + + + +-+ + +-+-+ + + + + +-+-+-+-+ + +-+ +-+-+ + +-+ + + +-+-+-+ +-+-+-+ + +-+ +-+-+ +-+ + +-+-+-+-+-+-+-+ + +-+ + +-+-+-+ +-+ + + + +-+-+ + +-+-+-+ + + + + + + +-+ +",
                      "| |       |   |   |   |   |   |   | | | |   |   |   |   | | |   |   |   |   |   |   |   | |     |   |     | | |       | |   |               |     | |     |   | |   | |   |     | |     | |   |   | |   |",
                      "+ +-+-+-+ +-+ + +-+ + +-+ +-+ + +-+ + + + +-+-+ +-+ +-+-+ + + + + + +-+ + +-+ + +-+-+-+ + +-+-+ +-+ + +-+ +-+ +-+-+-+-+ + +-+-+-+ +-+-+-+-+ +-+-+ + +-+-+ + +-+ +-+-+ +-+ + + +-+ + +-+-+ + +-+ +-+ +-+ +",
                      "|     | |     |     |   | | |   |   |   | |   | |   |   | |   | | | |   | |   |       | | |       |     |   | |   |       |     |   | |   | |   | | |         | |   |   |   |   |         | |   |   |   |",
                      "+-+-+ + + +-+-+-+-+-+-+ + + +-+-+ +-+-+-+ +-+ + + +-+ + + +-+-+ + +-+ +-+ + +-+-+-+-+ + +-+ +-+-+ +-+-+ +-+ + + + + +-+ +-+ +-+ +-+ + + + +-+ + + + +-+-+-+ + + + +-+-+ + + +-+ +-+ +-+-+-+ + +-+ +-+ +-+",
                      "|       | |     |       | | |   |   |         |   |   | |   | |   |   |   | |         |     |   |     |   |   | |   |   |     | |     | |     |   | |       | |       |   |   |   | |   |   |   |   |   |",
                      "+ +-+ +-+-+ +-+ + +-+-+ + + + + +-+ + +-+ +-+-+-+-+ +-+ +-+ + +-+ + +-+ +-+ + +-+-+-+-+-+-+ + + + + + +-+ +-+-+ +-+-+ +-+ +-+-+ + +-+-+ +-+-+-+-+-+ + +-+-+-+ +-+-+-+ +-+-+-+-+-+ + + +-+ +-+-+ + + +-+ +",
                      "|   |     |   | | |   | | | | |   | | |   | |   |   |   |   |   |   | |     |     |         | | | | |       |   |     |   | |   |         |     |   | |     |       | |   |     | | |     | |   | |   | |",
                      "+-+ +-+ + +-+-+ + +-+ + + + +-+-+ + + + +-+ + +-+ +-+ +-+ +-+-+ + +-+ +-+-+-+-+-+ + +-+-+-+-+-+ + + +-+-+ +-+ +-+ + +-+ +-+ + +-+-+-+-+-+ + +-+-+ +-+ +-+-+ +-+-+-+ + + + + +-+ + + +-+-+-+ + +-+-+-+ + +",
                      "|   |   |       |     | | |     | |   | |   |     | | |   |     |   | | |   |     | |       |   | |     |     |   |     | |     |       |   |   | |   |   | |   |   | | | |   |   | |       | |       | |",
                      "+ +-+-+-+-+-+-+-+-+-+-+-+ +-+-+ + +-+ + + +-+-+-+ + + + +-+ +-+-+-+ + + + +-+ +-+-+ + +-+-+ + +-+-+-+-+-+-+-+-+ +-+-+-+-+ +-+ + + +-+-+ + +-+ + + + +-+ + + + + + +-+ + +-+-+ +-+-+ + +-+-+-+ + +-+-+-+ +",
                      "|             |           |     |   | | | |   |   |   | | |   |     |   |     |     |     |   |   |         |   |     | |   | |   |   | | |   |   |   | |   | | |     | |   |       | |         |       |",
                      "+-+-+-+-+ +-+ + +-+-+ +-+-+ +-+-+-+ + + + + + + +-+-+-+ + +-+ +-+-+-+-+ +-+-+-+ +-+-+-+ + +-+-+-+ + +-+-+-+ + +-+-+-+ + +-+ + +-+-+ +-+ +-+ +-+ +-+-+ + +-+-+ +-+-+-+-+ + + +-+-+-+-+ + +-+-+ +-+ +-+-+-+",
                      "|   |   |   |   |   | | |           | | | | |   |     |     |     |   |     |   |     | |       | |   |   |         |   |   |   |       |   |   |       |   |           | |   |     | | |     |   |   | |",
                      "+ + + + +-+ +-+-+-+ + + + + +-+ +-+-+-+ + + +-+-+ +-+ +-+ + +-+-+ + +-+-+-+ + +-+-+ + + +-+-+-+ + +-+ +-+ +-+ +-+-+ +-+ + + +-+ + +-+-+-+ +-+-+ + +-+ +-+ + +-+ +-+-+ +-+ +-+-+ +-+ + + + +-+-+ +-+-+ + +",
                      "| |   | | |         |     | |   |         | |     | |     | |   | |   |   |         | | |       |   |       |   |   |   | |     |         |     | |   |   | |   |   |   |       |   |   | |   | |       |",
                      "+ +-+-+ + +-+-+ +-+-+-+-+-+ +-+-+ +-+-+-+-+ + +-+-+ +-+-+-+ + + + + + + + +-+ +-+-+-+ + + +-+-+-+-+ +-+-+ + +-+ + +-+ +-+ +-+-+-+-+-+-+-+-+ +-+-+ +-+-+ +-+ + +-+ + +-+ +-+-+-+-+ +-+-+-+ +-+ + + +-+-+ +",
                      "| |   | | |     |   |     |     |         | | |     |     | | | |   | | |   | |   |   | | |     |     |   | |   | |   |   |   |   |   |     |   |     | |   |     | |   |   |             |   | |     | |",
                      "+ + + + + + +-+-+ +-+ +-+ +-+ + +-+-+-+-+ + + + +-+ + +-+-+ + + +-+-+ + +-+ + +-+ + +-+ + + +-+ + +-+ +-+-+-+ +-+ + + + +-+ + + + + +-+ +-+-+ + +-+-+ + + +-+-+-+-+-+ +-+-+ + +-+-+-+ +-+-+ +-+ +-+-+ + +",
                      "|   | |     |           |     |         |   |   |   |         |       |   |       |     |   |   |   |         |   | |       |   | |     |     |         |             |             |         |       | E",
                      "+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+"};


    find_start(maze, 4, currX, currY);

    if (find_exit(maze, currX, currY))
    {
      cout << "Map " << counter << " -- Solution found:" << endl;
    }
    else
    {
      cout << "Map " << counter << " -- No solution found:" << endl;
    }
		counter++;

    //print_matrix(maze, 4);

    cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

    find_start(mazeCurr, 201, currX, currY);

    if (find_exit(mazeCurr, currX, currY))
    {
      cout << "Map " << counter << " -- Solution found:" << endl;
    }
    else
    {
      cout << "Map " << counter << " -- No solution found:" << endl;
    }

		counter++;

    //print_matrix(mazeCurr, 201);

    cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];

		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

		for (int i = 0; i < 201; i++)
			mazeCurr[i] = maze2[i];
		find_start(mazeCurr, 201, currX, currY);

		if (find_exit(mazeCurr, currX, currY))
		{
			cout << "Map " << counter << " -- Solution found:" << endl;
		}
		else
		{
			cout << "Map " << counter << " -- No solution found:" << endl;
		}

		counter++;

		//print_matrix(mazeCurr, 201);

		cout << endl;

    clock_t end = clock();
    double time_spent = (double)(end - begin) / CLOCKS_PER_SEC;

    cout << "Runtime: " << time_spent << endl;

  return 0;
}
